package com.tipgame.ui.Tipp;

import org.hibernate.Session;
import com.tipgame.Threads.StatisticThread;
import com.tipgame.data.GameMatch;
import com.tipgame.data.User;
import com.tipgame.data.UserMatchConnection;
import com.tipgame.database.DatabaseHelper;
import com.tipgame.utils.TipgameUtils;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;

public class MatchView extends CustomComponent {

	@AutoGenerated
	private GridLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout_2;
	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = -6505119948672165582L;
	private DatabaseHelper _DatabaseHelper;
	
	private UserMatchConnection _UserMatchConnection;
	private User user;
	private ResultView resultTippView;
	private GameMatch gameMatch;
	private Button pictureRemoveTippButton;
	private Button pictureSetTippButton;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public MatchView(UserMatchConnection userMatchConnection, User user) {
		this.user = user;
		_UserMatchConnection = userMatchConnection;
		_DatabaseHelper = DatabaseHelper.getInstance();
		gameMatch = new GameMatch();
		gameMatch = TipgameUtils.getGameMatchFromId(userMatchConnection);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Session hibernateSession = _DatabaseHelper.getHibernateSession();
		hibernateSession.beginTransaction();
		_DatabaseHelper.attachPojoToSession(hibernateSession, gameMatch);
		_DatabaseHelper.attachPojoToSession(hibernateSession, userMatchConnection);
		
		setKickOffLayout(gameMatch.getKickOff());
		
		setFixtureLayout(gameMatch.getHomeTeamName(), gameMatch.getHomeTeamImage(),
				gameMatch.getAwayTeamName(), gameMatch.getAwayTeamImage());
		
		setResultTippView(userMatchConnection.getResultTippHomeTeam(), 
				userMatchConnection.getResultTippAwayTeam(), gameMatch.getKickOff());
		
		setResultFinalView(gameMatch.getResultFinalHomeTeam(), gameMatch.getResultFinalAwayTeam());
		
		hibernateSession.getTransaction().commit();
	}
	
	private void setKickOffLayout(String kickOff)
	{
		KickOffView kickOffView = new KickOffView(kickOff);
		mainLayout.addComponent(kickOffView, 0, 0);
	}
	
	private void setFixtureLayout(String homeTeamName, String homeTeamImage, 
			String awayTeamName, String awayTeamImage)
	{
		FixtureView fixtureView = new FixtureView(homeTeamName, homeTeamImage, 
				awayTeamName, awayTeamImage);
		mainLayout.addComponent(fixtureView, 1, 0);
	}
	
	private void setResultTippView(String resultTippHomeTeam, String resultTippAwayTeam, String kickOff)
	{
		resultTippView = new ResultView(resultTippHomeTeam, resultTippAwayTeam, true, kickOff, true);
		resultTippView.setRemoveTippButton(pictureRemoveTippButton);
		resultTippView.setSetTippButton(pictureSetTippButton);
		mainLayout.addComponent(resultTippView, 3, 0);
		mainLayout.setComponentAlignment(resultTippView, new Alignment(48));
		
		if ((resultTippHomeTeam.isEmpty()) && (resultTippAwayTeam.isEmpty())) {
			pictureRemoveTippButton.setVisible(false);
			pictureSetTippButton.setVisible(true);
		}
		else {
			pictureRemoveTippButton.setVisible(true);
			pictureSetTippButton.setVisible(false);
		}
	}
	
	private void setResultFinalView(String resultFinalHomeTeam, String resultFinalAwayTeam)
	{
		ResultView resultView = new ResultView(resultFinalHomeTeam,	resultFinalAwayTeam, false, "", false);
		mainLayout.addComponent(resultView, 2, 0);
	}
	
	private Boolean fieldsAreFilled()
	{
		ResultView view = (ResultView)mainLayout.getComponent(3, 0);
		return (view.getResultHomeTeam() != "") && (view.getResultAwayTeam() != "");
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("60px");
		mainLayout.setMargin(false);
		mainLayout.setColumns(6);
		mainLayout.setColumnExpandRatio(0,0);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("60px");
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		mainLayout.addComponent(gridLayout_2, 5, 0);
		mainLayout.setComponentAlignment(gridLayout_2, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setMargin(true);
		gridLayout_2.setColumns(2);
		
		pictureSetTippButton = new Button();
		pictureSetTippButton.setDescription("Tipp abgeben...");
		pictureSetTippButton.setEnabled(enableButton());
		pictureSetTippButton.setVisible(false);
		//pictureSetTippButton.setStyleName(Reindeer.BUTTON_LINK);
		pictureSetTippButton.setIcon(new ThemeResource("resources/icons/ok.png"));
        gridLayout_2.addComponent(pictureSetTippButton, 0, 0);
		pictureSetTippButton.addListener(new ClickListener() {
            public void buttonClick(ClickEvent event) {
            	submitTipp();            
            }
        });
		
		pictureRemoveTippButton = new Button();
		pictureRemoveTippButton.setDescription("Tipp zurücksetzen...");
		pictureRemoveTippButton.setEnabled(enableButton());
		pictureRemoveTippButton.setVisible(false);
		//pictureRemoveTippButton.setStyleName(Reindeer.BUTTON_LINK);
		pictureRemoveTippButton.setIcon(new ThemeResource("resources/icons/remove.png"));
        gridLayout_2.addComponent(pictureRemoveTippButton, 1, 0);
		pictureRemoveTippButton.addListener(new ClickListener() {
            public void buttonClick(ClickEvent event) {            	
                resetTipp();
            }
        });
		
		return gridLayout_2;
	}
	
	private void resetTipp() {
		DatabaseHelper databaseHelper = DatabaseHelper.getInstance();
		Session session = databaseHelper.getHibernateSession();
		
		session.beginTransaction();
		databaseHelper.attachPojoToSession(session, _UserMatchConnection);
		_UserMatchConnection.setResultTippAwayTeam("");
		_UserMatchConnection.setResultTippHomeTeam("");
		_UserMatchConnection.setAlreadyProcessed(false);
		session.getTransaction().commit();
		
		resultTippView.setResultAwayTeam("");
		resultTippView.setResultHomeTeam("");
		pictureRemoveTippButton.setVisible(false);
		pictureSetTippButton.setVisible(true);
	}
	
	private Boolean enableButton()
	{
		Boolean result;
		Session session = _DatabaseHelper.getHibernateSession();
		session.beginTransaction();
		_DatabaseHelper.attachPojoToSession(session, gameMatch);
		String kickOff =  gameMatch.getKickOff().replace("Uhr", "").trim();
		result = !TipgameUtils.compareDates(kickOff);
		session.getTransaction().commit();
		return result;
	}
	
	private void submitTipp() 
	{
		if(fieldsAreFilled())
		{
			Session session = _DatabaseHelper.getHibernateSession();
			session.beginTransaction();
			_DatabaseHelper.attachPojoToSession(session, _UserMatchConnection);
			ResultView view = (ResultView)mainLayout.getComponent(3, 0);		
			_UserMatchConnection.setResultTippHomeTeam(view.getResultHomeTeam());
			_UserMatchConnection.setResultTippAwayTeam(view.getResultAwayTeam());
			session.saveOrUpdate(_UserMatchConnection);
			
			session.getTransaction().commit();
			StatisticThread statistic = new StatisticThread(user);
			statistic.start();
			pictureRemoveTippButton.setVisible(true);
			pictureSetTippButton.setVisible(false);
		}
		else
		{
			getWindow().showNotification("Bitte füllen Sie alle Tippfelder für die gewählte Partie aus!");
		}    
	}
}
