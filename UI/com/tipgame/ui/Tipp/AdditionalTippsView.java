package com.tipgame.ui.Tipp;

import java.util.Calendar;

import org.hibernate.Session;

import com.tipgame.data.User;
import com.tipgame.database.DatabaseHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class AdditionalTippsView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout gridLayout_1;

	@AutoGenerated
	private ComboBox CboxTippWinner;

	@AutoGenerated
	private Label LabelWinner;

	@AutoGenerated
	private GridLayout gridLayout_2;

	@AutoGenerated
	private Button BtnTippGermany;

	@AutoGenerated
	private Embedded iconOkTippGermany;

	@AutoGenerated
	private ComboBox CboxTippGermany;

	@AutoGenerated
	private Label LabelTippGermany;

	@AutoGenerated
	private GridLayout gridLayout_3;

	@AutoGenerated
	private Button BtnWinner;

	@AutoGenerated
	private Embedded iconOkTippWinner;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private DatabaseHelper databaseHelper;
	private User user;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 2111601233339166221L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AdditionalTippsView(User user) {
		this.user = user;
		databaseHelper = DatabaseHelper.getInstance();
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		setCboxTippGermanyValues();
		setCboxTippWinnerValues();
		setUserChoices();
		enableOrDisableAdditionalTipps();
	}
	

	public void onButtonClick (Button.ClickEvent event) {
        if (event.getButton() == BtnTippGermany)
        {
        	setAdditionalTipp(false);
        	iconOkTippGermany.setVisible(true);
        }           
        else if (event.getButton() == BtnWinner)
        {
        	setAdditionalTipp(true);
        	iconOkTippWinner.setVisible(true);
        }
    }
	
	private void enableOrDisableAdditionalTipps()
	{
		Calendar cal = Calendar.getInstance();
		Long actualTime = cal.getTimeInMillis();
		cal.set(2012, 6, 8, 18, 0);
		Long firstGame = cal.getTimeInMillis();
		
		CboxTippGermany.setEnabled(firstGame > actualTime);
		CboxTippWinner.setEnabled(firstGame > actualTime);
		BtnTippGermany.setEnabled(firstGame > actualTime);
		BtnWinner.setEnabled(firstGame > actualTime);
	}
	
	private void setAdditionalTipp(Boolean isWinnerTipp)
	{
		Session session = databaseHelper.getHibernateSession();
		try {
			session.beginTransaction();
			if(isWinnerTipp)
			{
				if (user.getWinnertipp().isEmpty())
				{
					user.setWinnertipp((String) CboxTippWinner.getValue());
				}
			}
			else
			{
				if(user.getGermanytipp().isEmpty())
				{
					user.setGermanytipp((String) CboxTippGermany.getValue());
				}
			}
			session.saveOrUpdate(user);			
			session.getTransaction().commit();
		} catch (Exception e) {
			e.printStackTrace();
			session.getTransaction().rollback();
		}
			
	}

	private void setCboxTippGermanyValues()
	{
		CboxTippGermany.addItem("Vorrunde");
		CboxTippGermany.addItem("Achtelfinale");
		CboxTippGermany.addItem("Viertelfinale");
		CboxTippGermany.addItem("Halbfinale");
		CboxTippGermany.addItem("Finale");
	}
	
	private void setCboxTippWinnerValues()
	{
		CboxTippWinner.addItem("Polen");
		CboxTippWinner.addItem("Griechenland");
		CboxTippWinner.addItem("Russland");
		CboxTippWinner.addItem("Tschechien");
		CboxTippWinner.addItem("Deutschland");
		CboxTippWinner.addItem("Niederlande");
		CboxTippWinner.addItem("Portugal");
		CboxTippWinner.addItem("Dänemark");
		CboxTippWinner.addItem("Spanien");
		CboxTippWinner.addItem("Italien");
		CboxTippWinner.addItem("Irland");
		CboxTippWinner.addItem("Kroatien");
		CboxTippWinner.addItem("Ukraine");
		CboxTippWinner.addItem("Schweden");
		CboxTippWinner.addItem("Frankreich");
		CboxTippWinner.addItem("England");
		
	}
	
	private void setUserChoices()
	{
		CboxTippGermany.select(user.getGermanytipp());
		CboxTippWinner.select(user.getWinnertipp());
		if(!user.getGermanytipp().isEmpty())
			iconOkTippGermany.setVisible(true);
		if(!user.getWinnertipp().isEmpty())
			iconOkTippWinner.setVisible(true);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1);
		
		return mainLayout;
	}


	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("50.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setColumns(3);
		gridLayout_1.setRows(4);
		
		// gridLayout_3
		gridLayout_3 = buildGridLayout_3();
		gridLayout_1.addComponent(gridLayout_3, 2, 3);
		
		// LabelTippGermany
		LabelTippGermany = new Label();
		LabelTippGermany.setImmediate(false);
		LabelTippGermany.setWidth("-1px");
		LabelTippGermany.setHeight("-1px");
		LabelTippGermany.setValue("Wie weit kommt Deutschland");
		gridLayout_1.addComponent(LabelTippGermany, 0, 2);
		gridLayout_1.setComponentAlignment(LabelTippGermany, new Alignment(20));
		
		// CboxTippGermany
		CboxTippGermany = new ComboBox();
		CboxTippGermany.setImmediate(false);
		CboxTippGermany.setWidth("-1px");
		CboxTippGermany.setHeight("-1px");
		gridLayout_1.addComponent(CboxTippGermany, 1, 2);
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		gridLayout_1.addComponent(gridLayout_2, 2, 2);
		
		// LabelWinner
		LabelWinner = new Label();
		LabelWinner.setImmediate(false);
		LabelWinner.setWidth("-1px");
		LabelWinner.setHeight("-1px");
		LabelWinner.setValue("Europameister");
		gridLayout_1.addComponent(LabelWinner, 0, 3);
		gridLayout_1.setComponentAlignment(LabelWinner, new Alignment(20));
		
		// CboxTippWinner
		CboxTippWinner = new ComboBox();
		CboxTippWinner.setImmediate(false);
		CboxTippWinner.setWidth("-1px");
		CboxTippWinner.setHeight("-1px");
		gridLayout_1.addComponent(CboxTippWinner, 1, 3);
		
		return gridLayout_1;
	}


	@AutoGenerated
	private GridLayout buildGridLayout_3() {
		// common part: create layout
		gridLayout_3 = new GridLayout();
		gridLayout_3.setImmediate(false);
		gridLayout_3.setWidth("-1px");
		gridLayout_3.setHeight("-1px");
		gridLayout_3.setMargin(false);
		gridLayout_3.setColumns(2);
		
		// embedded_2
		iconOkTippWinner = new Embedded();
		iconOkTippWinner.setImmediate(false);
		iconOkTippWinner.setWidth("20px");
		iconOkTippWinner.setHeight("20px");
		iconOkTippWinner.setSource(new ThemeResource(
				"resources/icons/ok.png"));
		iconOkTippWinner.setType(1);
		iconOkTippWinner.setMimeType("image/png");
		iconOkTippWinner.setVisible(false);
		gridLayout_3.addComponent(iconOkTippWinner, 0, 0);
		
		// BtnWinner
		BtnWinner = new Button("",this,"onButtonClick");
		BtnWinner.setCaption("Tipp abgeben");
		BtnWinner.setImmediate(true);
		BtnWinner.setWidth("-1px");
		BtnWinner.setHeight("-1px");
		BtnWinner.setStyleName(Reindeer.BUTTON_LINK);
		gridLayout_3.addComponent(BtnWinner, 1, 0);
		
		return gridLayout_3;
	}


	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("-1px");
		gridLayout_2.setHeight("-1px");
		gridLayout_2.setMargin(false);
		gridLayout_2.setColumns(2);
		
		// embedded_1
		iconOkTippGermany = new Embedded();	
		iconOkTippGermany.setImmediate(false);
		iconOkTippGermany.setWidth("20px");
		iconOkTippGermany.setHeight("20px");
		iconOkTippGermany.setSource(new ThemeResource(
				"resources/icons/ok.png"));
		iconOkTippGermany.setType(1);
		iconOkTippGermany.setMimeType("image/png");
		iconOkTippGermany.setVisible(false);
		gridLayout_2.addComponent(iconOkTippGermany, 0, 0);
		
		// BtnTippGermany
		BtnTippGermany = new Button("",this,"onButtonClick");
		BtnTippGermany.setCaption("Tipp abgeben");
		BtnTippGermany.setImmediate(true);
		BtnTippGermany.setWidth("-1px");
		BtnTippGermany.setHeight("-1px");
		BtnTippGermany.setStyleName(Reindeer.BUTTON_LINK);
		gridLayout_2.addComponent(BtnTippGermany, 1, 0);
		
		return gridLayout_2;
	}
}
