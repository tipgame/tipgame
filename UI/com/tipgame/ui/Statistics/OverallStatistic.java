package com.tipgame.ui.Statistics;

import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedHashSet;
import org.hibernate.Session;

import com.tipgame.data.Statistic;
import com.tipgame.data.User;
import com.tipgame.database.DatabaseHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.invient.vaadin.charts.InvientCharts;
import com.invient.vaadin.charts.InvientCharts.DecimalPoint;
import com.invient.vaadin.charts.InvientCharts.Series;
import com.invient.vaadin.charts.InvientCharts.SeriesType;
import com.invient.vaadin.charts.InvientCharts.XYSeries;
import com.invient.vaadin.charts.InvientChartsConfig;
import com.invient.vaadin.charts.InvientChartsConfig.AxisBase.AxisTitle;
import com.invient.vaadin.charts.InvientChartsConfig.CategoryAxis;
import com.invient.vaadin.charts.InvientChartsConfig.NumberYAxis;
import com.invient.vaadin.charts.InvientChartsConfig.Tooltip;
import com.invient.vaadin.charts.InvientChartsConfig.XAxis;
import com.invient.vaadin.charts.InvientChartsConfig.YAxis;

public class OverallStatistic extends CustomComponent {

	private static final long serialVersionUID = 7750889693740485298L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private AbsoluteLayout chartLayout;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OverallStatistic() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// chartLayout
		chartLayout = new AbsoluteLayout();
		chartLayout.setImmediate(false);
		chartLayout.setWidth("100.0%");
		chartLayout.setHeight("100.0%");
		chartLayout.setMargin(false);
		chartLayout.addComponent(generateChart());
		mainLayout.addComponent(chartLayout, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	private InvientCharts generateChart()
	{
		InvientChartsConfig chartConfig = new InvientChartsConfig();
        chartConfig.getGeneralChartConfig().setType(SeriesType.BAR);

        chartConfig.getTitle().setText("Statistik");
        
        chartConfig.setXAxes(setXAxis());
        chartConfig.setYAxes(setYAxis());
        Tooltip tooltip = new Tooltip();
        tooltip.setFormatterJsFunc("function() {"
                + " return '' + this.series.name +': '+ this.y +''; " + "}");
        chartConfig.setTooltip(tooltip);
        chartConfig.getCredit().setEnabled(false);

        InvientCharts invChart = new InvientCharts(chartConfig);
        invChart.setWidth("100%");
        invChart.setHeight("100%");
        setSeriesData(invChart);
        return invChart;
	}
	
	private void setSeriesData(InvientCharts chart)
	{
		DatabaseHelper databaseHelper = DatabaseHelper.getInstance();
		Session session = databaseHelper.getHibernateSession();
		session.beginTransaction();
		
		Iterator<Statistic> iter = session.createQuery(
			    "from Statistic order by rank desc")
			    .iterate();
		while(iter.hasNext())
		{
			Statistic statistic = iter.next();
			String name = getNameToUserId(statistic.getUserId());
			XYSeries seriesData = new XYSeries(name);
	        seriesData.setSeriesPoints(getPoints(seriesData, statistic.getPoints()));
	        chart.addSeries(seriesData);
		}
		
		session.getTransaction().commit();
	}
	
	private LinkedHashSet<XAxis> setXAxis()
	{
		CategoryAxis xAxis = new CategoryAxis();
        
        xAxis.setTitle(new AxisTitle("Spieler"));
        xAxis.setCategories(Arrays.asList(""));
        LinkedHashSet<XAxis> xAxesSet = new LinkedHashSet<InvientChartsConfig.XAxis>();
        xAxesSet.add(xAxis);
        
        return xAxesSet;
	}

	private LinkedHashSet<YAxis> setYAxis()
	{
		LinkedHashSet<YAxis> yAxesSet = new LinkedHashSet<InvientChartsConfig.YAxis>();
		NumberYAxis yAxis = new NumberYAxis();
		yAxis.setTitle(new AxisTitle("Punkte"));
		
        yAxesSet.add(yAxis);
        
        return yAxesSet;
	}
	
	private static LinkedHashSet<DecimalPoint> getPoints(Series series,
			double... values) {
		LinkedHashSet<DecimalPoint> points = new LinkedHashSet<DecimalPoint>();
		for (double value : values) {
			points.add(new DecimalPoint(series, value));
		}
		return points;
	}
	
	private String getNameToUserId(int userId)
	{
		String name = "";
		DatabaseHelper databaseHelper = DatabaseHelper.getInstance();
		Session session = databaseHelper.getHibernateSession();
		session.beginTransaction();
		
		Iterator<User> iter = session.createQuery(
			    "from User where userId = "+String.valueOf(userId))
			    .iterate();
		while(iter.hasNext())
		{
			User user = iter.next();
			name = user.getChristianname()+" "+user.getName();
		}
		
		return name;
	}
}
